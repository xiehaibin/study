# -*- coding: utf-8 -*-import osimport sysimport shutilimport stringimport randomfrom os.path import getsizeimport uuidimport gcimport timeheadContent = """end"""mmContent = """end"""hMethodsDict = {    1:"""/* *  methods：|METHOD| *  param：|parameter|1, |parameter|2 */local function |METHOD|() |parameter|1 with|parameter|2() |parameter|2;    """,    2:"""/* *  methods：|METHOD| *  param：|parameter| */local function |METHOD|()|parameter|;	""",}mmMethodsDic={       1:"""local function |METHOD||parameter|1|parameter|2()	local |parameter|1=(|parameter|1 * |parameter|2 )/2;end    """,    2:"""local function |METHOD|with|parameter|()	local |parameter|2= (|parameter| * |parameter|);end    """,}#影响性能,处理较多文件时不要用def getDirSize(dir):    size = 0L    for root, dirs, files in os.walk(dir):      size += sum([getsize(os.path.join(root, name)) for name in files])    return sizedef modifyContent(outDir, fileName):    fileHeadPath = os.path.join(outDir, fileName) + '.lua'    fileMMPath = os.path.join(outDir, fileName) + '.lua'    methods = getRandomStringList(minNSLogLen, maxNSLogLen)    headMethods = '';    mmMethods = ''    for m in methods:        temp = random.randint(1,len(hMethodsDict))        parameter = getRandomString(5,20)        dateStr = time.strftime('%Y-%m-%d %H:%M:%S',time.localtime(time.time()))        tempheadMethods = hMethodsDict.get(temp)        tempheadMethods = tempheadMethods.replace("|METHOD|",m)        headMethods += tempheadMethods.replace("|parameter|",parameter) + os.linesep        # headMethods += '- (void) ' + m + ';' + os.linesep        tempmmMethods = mmMethodsDic.get(temp)        tempmmMethods = tempmmMethods.replace("|METHOD|",m)        mmMethods += tempmmMethods.replace("|parameter|",parameter) + os.linesep        # content = ''        # for i in range(random.randint(g_methodContentNum / 2, g_methodContentNum + g_methodContentNum / 2)):        #     content += 'NSLog(@"' + getRandomString(minNSLogLen, maxNSLogLen) + '");' + os.linesep        # mmMethods += '- (void) ' + m + '{' + content + '}' + os.linesep    headMethods += """end"""    mmMethods += """end"""    with open(fileHeadPath, 'wb') as w:        w.write(headContent.replace('|CLASS|', fileName).replace("|DATETIME|", dateStr).replace("""end""", headMethods))    with open(fileMMPath, 'wb') as w:        w.write(mmContent.replace('|CLASS|', fileName).replace("|DATETIME|", dateStr).replace("""end""", mmMethods))def getRandomString(minLen=6, maxLen=25):    length = random.randint(minLen, maxLen)    letters = string.ascii_letters + string.digits + '_'    # alphanumeric, upper and lowercase    str1 = ''.join([random.choice(letters) for _ in range(length)])    if str1[0].isdigit():        str1 = getRandomString(minLen, maxLen)    return str1def getRandomStringList(minLen=30, maxLen=200):    list = []    len = range(random.randint(minLen, maxLen))    for i in len:        list.append(getRandomString())    return list#########################################################################################################if __name__ == '__main__':    global g_methodsNum    # global g_methodContentNum    outDir = "./DoMoreThings/";#文件输出目录    # g_methodsNum = random.randint(8,20) #15  #每个类中的方法数量的中间数    # g_methodContentNum = random.randint(8,12)#10  #每个方法中输出NSLog的数量的中间数    minNSLogLen = random.randint(6,15) #50  #每个NSLog最小长度    maxNSLogLen = random.randint(20,25) #400  #每个NSLog最大长度    addCount = 400#random.randint(700,900) #2000  #生成文件组数量, 平均35kb左右,3500大概100MB(根据上面参数生成不同结果)    if os.path.exists(outDir):        print 'clear dir... :' + outDir        shutil.rmtree(outDir)  #清空文件夹    os.mkdir(outDir)    gc.disable();    for i in range(addCount):        fileName = getRandomString(10, 60)        modifyContent(outDir, fileName)        if i % 10 == 0 :            print 'files num = ' + str(i)    gc.enable();    print 'add files count = ' , str(addCount)    print 'all files size = ' , getDirSize(outDir)    print 'all over'